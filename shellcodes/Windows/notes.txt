PEB:
typedef struct _PEB {
  BYTE                            Reserved1[2];
  BYTE                            BeingDebugged;
  BYTE                            Reserved2[1];
  PVOID                           Reserved3[2];
  PPEB_LDR_DATA                   Ldr;
  PRTL_USER_PROCESS_PARAMETERS    ProcessParameters;
  BYTE                            Reserved4[104];
  PVOID                           Reserved5[52];
  PPS_POST_PROCESS_INIT_ROUTINE   PostProcessInitRoutine;
  BYTE                            Reserved6[128];
  PVOID                           Reserved7[1];
  ULONG                           SessionId;
} PEB, *PPEB;


PEB address is in TEB,  0x30 bytes from the start.
TEB is in FS seg register.

PEB + 0xC -> PEB_LDR_DATA     contains info about loaded DLLs, double linked list.
PEB_LDR_DATA + 0x14  -> list named InMemoryOrderModuleList, ptr to first DLL loaded in memory.

Windows XP (all service packs), ntdll.dll and kernel32.dll are in the 2nd and 3rd entries.  

mov ebx, fs:0x30            ; pointer to PEB
mov ebx, [ebx + 0x0C]       ; pointer to PEB_LDR_DATA
mov ebx, [ebx + 0x14]       ; pointer to first entry in InMemoryOrderModuleList
mov ebx, [ebx]              ; pointer to second (ntdll.dll) entry 
mov ebx, [ebx]              ; point to third (kernel32.dll) entry
mov ebx, [ebx + 0x10]       ; Get kernel32.dll base address

rewriting to remove nulls for shellcode..

xor esi, esi
mov ebx, [fs:30h + esi]     ; avoids nulls
mov ebx, [ebx + 0x0C]
mov ebx, [ebx + 0x14]
mov ebx, [ebx]
mov ebx, [ebx]
mov ebx, [ebx + 0x10]           ; ebx holds kernel32.dll base address


PE format offsets:

RVA 0x78 - Export Table
Export Table + 0x14  -> number of functions that the DLL exports
Export Table + 0x1C  -> Address table, holds all the addresses of the exported functions
Export Table + 0x20  -> Name Pointer Table,  pointers to the names of export functions
Export Table + 0x24  -> Ordinal Table,  positions of functions in Address Table
